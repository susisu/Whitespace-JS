#!/usr/bin/env node

/*
 * Whitespace-JS / wspace
 * copyright (c) 2016 Susisu
 */

"use strict";

const fs = require("fs");

const co = require("co");

let program = require("commander");

let ws = require("../lib/ws.js");
let packageInfo = require("../package.json");

process.title = "wspace";
process.stdin.setEncoding("utf8");

program.usage("[options] <progfile>");
program.version(packageInfo.version + " (language version " + ws.LANGUAGE_VERSION + ")", "-v, --version");
program.option("-d, --debug", "dump instruction, stack and heap after each instruction");
program.option("-e, --eval <program>", "evaluate program");
program.option("-u, --unwspace", "parse program as UnWhitespace");
program.parse(process.argv);

let main = co(function * () {
    const DEBUG    = program["debug"];
    const EVAL     = program["eval"];
    const UNWSPACE = program["unwspace"];
    if (EVAL === undefined && program.args.length === 0) {
        program.help();
    }
    const PROGFILE = EVAL === undefined && program.args.length > 0
        ? program.args[0]
        : "";
    let src = EVAL !== undefined
        ? EVAL
        : yield readFile(PROGFILE, { encoding: "utf8" });
    // parse
    let prog = UNWSPACE
        ? ws.parser.unws(PROGFILE, src)
        : ws.parser.ws(PROGFILE, src);
    // optimise
    prog = ws.inst.compile(prog);
    // run
    yield ws.vm.run(
        prog,
        stdinStream(),
        x => process.stdout.write(x),
        c => process.exit(c),
        DEBUG
    );
}).catch(error => {
    process.stderr.write(String(error) + "\n");
    process.exit(1);
});

function readFile(filename, options) {
    return new Promise((resolve, reject) => {
        fs.readFile(filename, options, (error, data) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(data);
            }
        })
    });
}

function stdinStream() {
    let buffer = "";
    let end = false;
    let pending = null;

    process.stdin.on("readable", () => {
        let chunk = process.stdin.read();
        if (chunk !== null) {
            buffer += chunk;
            if (pending) {
                let c = buffer[0];
                buffer = buffer.substr(1);
                pending.resolve(c);
                pending = null;
            }
        }
    });

    process.stdin.on("end", () => {
        end = true;
        if (pending) {
            pending.reject(new Error("end of input"));
            pending = null;
        }
    });

    function input() {
        if (buffer.length > 0) {
            let c = buffer[0];
            buffer = buffer.substr(1);
            return Promise.resolve(c);
        }
        else {
            return new Promise((resolve, reject) => {
                pending = { resolve, reject };
            });
        }
    }

    return input;
}
